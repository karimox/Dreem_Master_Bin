"""TD_SleepStaging_B.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctSAeCiir4YS37l7i_olqyuwYXaOtGx5
"""
# -*- coding: utf-8 -*-

if __name__ == "__main__":
    """We will discuss the methods of machine learning to tackle this problem.
    
    To save you some time, train and test datasets have already been computed and are available in the data folder. You have two types of datasets:
    
    - Spectral dataset = data containing spectral power (spectrogram matrix): train and test
    - Features dataset = data containing precomputed features: train and test
    """

    import numpy as np
    import matplotlib.pyplot as plt
    from datetime import datetime

    from sklearn.metrics import balanced_accuracy_score, f1_score, confusion_matrix

    from dreem_master_bin.load_data import load_spectral_datasets, load_feature_datasets
    from dreem_master_bin.hypnogram import plot_hypnogram, stage_colors

    """Let's start with the spectral dataset !"""

    # load spectrogram dataset and shuffle train data
    x_train, y_train, x_test, y_test = load_spectral_datasets()
    p = np.random.permutation(len(y_train))
    x_train, y_train = x_train[p], y_train[p]

    """We have just load 4 variables:
    - x_train: input data that we are going to use for the training.
    It is an array of shape n_samples x n_features
    n_samples = number of sleep epochs
    n_features = number of features for each of these epochs.
    
        The features are: [index_window, power_frequency_1Hz, power_frequency_2Hz, ..., power_frequency_18Hz], 
        where index window to the position of the sample in its sleep record. 
    
    
    - y_train: labels associated to this data (sleep stages)
    - x_test, y_test: same as x_train and y_train, but for testing your model
    
    We are going to discuss two types of methods:
    1. dimension reduction + linear classifier
    2. non-linear classifier
    
    1 - Dimension reduction + linear classifier
    """

    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.decomposition import PCA
    from sklearn.svm import SVC

    # dimension reduction
    pca = make_pipeline(StandardScaler(),
                        PCA(n_components=5, random_state=10))
    pca.fit(x_train, y_train)

    classifier = SVC(kernel='linear')
    classifier.fit(pca.transform(x_train), y_train)

    # test it
    predictions = classifier.predict(pca.transform(x_test))
    scores = {'balanced_accuracy': balanced_accuracy_score(y_test, predictions),
              'f1_score': f1_score(y_test, predictions, average='weighted'),
              'confusion_matrix': confusion_matrix(y_test, predictions)}

    scores

    """2 - Non-linear classifier
    
    Ensemble learning - Random forest
    """

    # load spectrogram dataset and shuffle train data
    x_train, y_train, x_test, y_test = load_feature_datasets()
    p = np.random.permutation(len(y_train))
    x_train, y_train = x_train[p], y_train[p]

    # select a classifier and train it
    from sklearn.ensemble import RandomForestClassifier
    clf_rf = RandomForestClassifier(max_depth=10, random_state=42)
    print('training...')
    clf_rf.fit(x_train, y_train)

    # test it
    scores = {'balanced_accuracy': balanced_accuracy_score(y_test, predictions),
              'f1_score': f1_score(y_test, predictions, average='weighted'),
              'confusion_matrix': confusion_matrix(y_test, predictions)}

    scores
